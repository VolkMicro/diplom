name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - "*.*.*"  # Реакция на теги для автоматической сборки с версией тега

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Поддержка длинных путей
      - name: Поддержка длинных путей
        run: git config --global core.longpaths true

      # Шаг 2: Клонирование репозитория
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Мелкий клон для избежания проблем с длинными путями

      # Шаг 3: Логин в Docker Hub
      - name: Логин в Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Шаг 4: Сборка Docker-образа
      - name: Сборка Docker-образа
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/diplom:${{ github.ref_name }} .

      # Шаг 5: Публикация Docker-образа в Docker Hub
      - name: Публикация Docker-образа в Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/diplom:${{ github.ref_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Установка Helm
      - name: Установка Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Шаг 2: Установка kubectl
      - name: Установка kubectl
        run: |
          sudo snap install kubectl --classic

      # Шаг 3: Деплой в Kubernetes
      - name: Деплой в Kubernetes
        run: |
          # Создание директории для kubeconfig
          mkdir -p $HOME/.kube
          
          # Использование kubeconfig, закодированного в Base64
          echo "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ1ZFTkRRV1V5WjBGM1NVSkJaMGxKUzNsMFkzTmlkRmxUWWtWM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUa1JGZDAxRVZYaE9SRkUxVFdwYVlVWjNNSHBPUkVWM1RVUk5lRTVFVlRCTmFscGhUVUpWZUFwRmVrRlNRbWRPVmtKQlRWUkRiWFF4V1cxV2VXSnRWakJhV0UxM1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTENrRnZTVUpCVVVOdE9FZFFTMDl6TWpCUmR6WlllRzlJWTNnMGNDOURVRVZZTW1OQk56SkJSa0pOUjNkdWIwaFViMmxSVXpWNGNEaFZaelJUYjFSc1puZ0tja1JYUTFSSEsyNW1OVTkwYm1wcFlqSTJWbmhpVlVWR1pXbGFiRXQzVkU1bGFubzJhQzlWZGxjMVVYb3pTQ3RRYVdGMWJtOUNhWFJsUnpWV2JUVTVUQXBEY0ZkT2EwaG1OMDFXWkRkUFFrTk9Oa1J6YVNzek0ydDVVazV0Wld4c1UwZ3piMk56YmxKbmVqbEtjSHBGU214WVVWTnpTVmhqYUhoQ1MzTlVkMGs1Q21WNFdDdEhlaTlFWkZadk1WWlVOWFpYVUhoRFYyWkVZa2NySzNKcVlWaEpaWGN5YkV0SFkzQTRVMHhyZFdSdlQzaFJWM3BuUzFBdk0xbENWR1YxUlZFS2J6Sk1NMU5sUjBGNFVqbGtiVzFZYldkV2JYZG5iR3d3WjNkS1MwVkRhbWxyZDFnNFNrZHRhSFZyWXpjNFREUjBNMDh2Um0xR2RsTXZhVzV3SzFWdVRBcEZWMHMxT0ZOUE1GZHlkR3RxSzA4NU0zRlVOWEE1V0RkMU1ubDZRV2ROUWtGQlIycFhWRUpZVFVFMFIwRXhWV1JFZDBWQ0wzZFJSVUYzU1VOd1JFRlFDa0puVGxaSVVrMUNRV1k0UlVKVVFVUkJVVWd2VFVJd1IwRXhWV1JFWjFGWFFrSlJXWEZzUkdaS09HTXlLMjloTml0T2MwUnliSEJ0VUVWdVpsSkVRVllLUW1kT1ZraFNSVVZFYWtGTloyZHdjbVJYU214amJUVnNaRWRXZWsxQk1FZERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUW5OTVdrWlVRM0phZFFwYWJVczFNRkpSWmpob0t6YzJTQ3RMUXpNMEswZGlNRzlQTUcweVlYbHZXSHBYUTFOVmRUZGtNVmh5TVdNMFdYbHNkSFJXVVZONFMzWXlWVTQyTmpCVENuVnRXRGs1UVZaVVJqRXZZVk5hUTFkTFFYaDFielkxU0RrclRYQk9aRXA1WmxScmVrMVpOelJ4VEVnM1dYTXdhR1ZDVGk4ck0xTkJPR2hIWW1abVpqRUthRzFTVGxOdGJqSXhPVTV0T1VnclIwOUJVM3AwYmxwQlVrcEhkekJsYjFvemIxTTVUVE5uVkhOSlZtb3hVMGxaUzNwd1pDOXVNRGhWT0VGWlQwVlJTZ3BsVVdsa2JubEJOVTF1YkdadVluY3lNVWd5V21KclRuaDNZVWhLTTB4TGFWcFhkMFZvUm5oa1JrNXBXRlZDUlhGYVRpOXVOWFZuTUd4NmN6VlpURE51Q2tvMFp6UTNPRFZoUVVNeE5ubzVVVzlQYWxGT1RFOWtjRWh2YzNKeVpIUjJaR2hvUTFGalN5OUVUSGRoYkc1T2R5czFhbm8yYkRVM1VtVllPSFFyYUVZS1NGcHFTak5CVjBVMVpUbFRDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsKICAgIHNlcnZlcjogaHR0cHM6Ly84OS4xNjkuMTMzLjIzNjo2NDQzCiAgbmFtZToga3ViZXJuZXRlcwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3Rlcjoga3ViZXJuZXRlcwogICAgdXNlcjoga3ViZXJuZXRlcy1hZG1pbgogIG5hbWU6IGt1YmVybmV0ZXMtYWRtaW5Aa3ViZXJuZXRlcwpjdXJyZW50LWNvbnRleHQ6IGt1YmVybmV0ZXMtYWRtaW5Aa3ViZXJuZXRlcwpraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGt1YmVybmV0ZXMtYWRtaW4KICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlLWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJMVkVORFFXaEhaMEYzU1VKQlowbEpaV05oZFVGcFkxVTBVMDEzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkR1ZFVlVUVUpGUjBFeFZVVUtRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRV1ZHZHpCNVRrUkZkMDFFVlhoT1JGRTFUV3BhWVVaM01IbE9WRVYzVFVSVmVFNUVWVEJOYW1oaFRVUjNlQXBJZWtGa1FtZE9Wa0pCYjFSR2JYUXhXVzFXYUZwSE1EWlpNbmd4WXpOU2JHTnBNV2hhUnpGd1ltNU5lRWRVUVZoQ1owNVdRa0ZOVkVWSGRERlpiVlo1Q21KdFZqQmFXRTEwV1ZkU2RHRlhOSGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVhamMwTTFRS2VrRkNWRkl4VW1WeFVqVlZRaloxV1VkVk1tdzJWMUZhYlhGUlJrRllSRGwwUjJKUGFYSlhhR3gxVG1kSllqRmlZa3RtZEd4RlJrMWpUV2g1WkVkVVR3cEdWRkJKYlRWeE9HdFVTbUpIZHpKdFMzRmpibk42YWtoSWFWTk1TV0o0WjNZNGFHMVlTM2QzTnk5alJtZHdRMlJtTDNKbmFYZExabGgwUm0xc1oxRkVDazlZSzI1RVlVcGhTalJsTnpSUVN6VllWVU13UXpaVWNqUnVNVFJ1YlhvMU9EUmlla2hWYml0bU1EWlpkbUU0VDFaNE9WUmlSRm8xU2pONlRXODBiR1VLU1U5U2FrWkJjazVHUW1GRmVYZEViMGh2VWt0QlpWQlRNemwxY1RrMlJIY3phbkJxZVN0d1duQkhRMEo1V1hCUFNqaFpXVmhRYmtGUGFIQmtaWE5xTXdvM1pIRXlkV2hRV2s4dlVUazFSM1JGWWtWV2RFVTVVVEpMWWxCQ1VWbEpLMHgwVFRScFkzSTVUV2hCVXpCeVVHczFUVUpwTDNwRWFWSm1ZVkYwWTFSNUNqbFVSelExVFV0VGJXdFFWMFpGYW1aQlowMUNRVUZIYWxacVFsVk5RVFJIUVRGVlpFUjNSVUl2ZDFGRlFYZEpSbTlFUVZSQ1owNVdTRk5WUlVSRVFVc0tRbWRuY2tKblJVWkNVV05FUVdwQlRVSm5UbFpJVWsxQ1FXWTRSVUZxUVVGTlFqaEhRVEZWWkVsM1VWbE5RbUZCUmtKcGNWVk9PRzU0ZW1JMmFISnlOQW95ZDA5MVYyMVpPRk5rT1VWTlFUQkhRMU54UjFOSllqTkVVVVZDUTNkVlFVRTBTVUpCVVVKcVkwdGFNSFV5U25wUloySnNOazVKWldwRll6TnBOVTlGQ2psSWRUQTRXRGd4UzNwVlNHaG5XREZVVldWcmEyOUdiVFZWUkZSUlpEbExTMGxQU1ZwRWJqVlhNVEp1VTNwWVdrRkhSM1JvV2pFck1IRm1WVmRqVEUwS2FFbFdjRlJpUkZWVU0zSlNWQ3RsVkdKelFqWkhhVEV5V0VGT1IzVkxiRUZwUW5GaU1ETnVZbmhtVWk5cFFWZGpabFJSY0RBNFlXSmpTMGxXVDNWVVp3cGlZMFV6VUdGV1pFRkRjMUpMVUZCQ1RsVTNUMGhxYjJ3d01VRTBabFZpUVRGUmNWQXpiM0JWVGk5V2REWTNaazlOVnpNMmFrMUNNVW9yVFROTFRrZGxDblpqY0VWRVNuSnRRVFl4TWpJeWNIVTJaSFVySzBoVFVYcFdTbU5NVFZSRmJsQkxMM0pLWkcwcmQwVlFRVWx0ZDB0dmNtaFNhV1pvYVZreWJXdENNVGtLY1N0cU5XbEJNRmRtY2twbFkyaEJTVGt4VVZsV2FsSkVZVEZ0TkVnME1EbHJTakZZYjNwbWVWbGljMVJpYldkQ1JXMDRWakl4TDBOamFUQnNDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsKICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQk5Dc3JUakE0ZDBGVk1HUlZXSEZyWlZaQlpYSnRRbXhPY0dWc2EwZGFjV3RDVVVaM0wySlNiWHB2Y1RGdldtSnFDbGxEUnpsWE1ubHVOMXBTUWxSSVJFbGpibEpyZW1oVmVubEtkV0YyU2tWNVYzaHpUbkJwY1c1S04wMDBlSGcwYTJsNVJ6aFpUQzlKV214NWMwMVBMek1LUWxsTFVXNVlMelkwU1hORGJqRTNVbHB3V1VWQmVtd3ZjSGN5YVZkcFpVaDFLMFI1ZFZZeFFYUkJkV3MySzBvNVpVbzFjeXRtVDBjNGVERktMMjQ1VHdwdFRESjJSR3hqWmxVeWR6SmxVMlE0ZWt0UFNsaHBSR3RaZUZGTGVsSlJWMmhOYzBFMlFqWkZVMmRJYWpCMEwySnhkbVZuT0U0ME5sazRkbkZYWVZKbkNtZGpiVXRVYVdaSFIwWjZOWGRFYjJGWVdISkpPU3N6WVhSeWIxUXlWSFl3VUdWU2NsSkhlRVppVWxCVlRtbHRlbmRWUjBOUWFUZFVUMGx1U3k5VVNWRUtSWFJMZWpWUFZFRlpkamgzTkd0WU1tdE1XRVU0ZGxWNGRVOVVRMnR3Y0VReGFGSkpNM2RKUkVGUlFVSkJiMGxDUVZGRFRVbFpUamxQV1dKa2NrSlhiZ3B0UzNSdWJEaDFZakUzY1ZGRVRIVlpjbWxUTWxkNGRDOU1hME5wVEVVM1kwTkRja1IxUW5BeFRWbHFVVWN2ZUVaS1dGWnRVVVEyVmtsQ00xVTRRekJwQ2xSMFZ6Vm5lR3hUUm1ocWNqVkdaemgxYTBKWVRsTmtaVUkyYjBwdVIwaFZUMFZOVTNCVFIwcFpkSFl5TTJnNUwyOVZhREZ1UkdKa1ZVdFZNVXM0UjNJS1ZWaEJNbEp0WVZSS1ZYbGFTa04xUWxKYU5VUTBTVzgwTlUxdlRHWmpXVlUwV1hkSFlVeEhRVWhPVWtOblFYaDVRMFJFUW1ZNFdtUlJNR1ZGV25vemVBcHFhVUpxUjA0NVIwNTBUV3g1TkhSRVVXY3ZXVk01V21FdmNFdHNXVU00Y0RrNE9VRjBWVGxGWTBWaFptbFllVEJ3VXpZMWNtZzJMM2hvWmtvemNIb3ZDbGg2WmpKcFVrUk9TU3R3Y3pkSVEwcHdia05sZVRGU2NUbFFkVWRJY21vNE5reERRaXRCU0ZkRU5IcHNWRXd4ZDJaWmJrOVZlVFU1Ymtod2NtMVpha01LUmtwb2NXZGlSalZCYjBkQ1FVOXlNbWRWWmxWaWFISnFhRlUzYmtKVlRVMTRVa3RsUzNCQmIyMXJRVlEzTm1OQ1IzUk1aekkwWkZkMFZtcHZRazlqU0FwWE5VcE1LMUpsZG5KNVRsQTBaVGgzVWpSTVdYZDFRbkZGYURFelNVOWxORFUzT0hBdlpqRlBUazR4TlZWbmFTOVpOMGt5TWtVNVNFSTVXVTFEU1N0SENrNVFOMlpwVFZsalNtbEZSVTV4Y1doWVZGSmpXa0ZWYVVOTFF6QXlORnBwYlM5TVRtdERVRzlSYXpRMFFVTlhOVFZrZDJWU1NqRnFRVzlIUWtGUWFGZ0tLek54Y1d4b1JubEtjalJwYlRSRVdWbERTMWN3ZEdWWVZFNVRTbFJNT0haT2JqY3hUWFJrZW1FMU1FWjNTalozZDJ0ck9UUlhUV2xFY1dkTFNHaGthUXBWZUZKcVltWmhia012Yld0Uk9FNXVLMFEyYUVOck9UaFNiVzlUTjJOeFREZ3ljMDlOUmt4bVZucDNWVm81WTBSd1JVUmhiWGNyTkhKbVJYSmllV2xaQ21Sb1ZYRmFOVVpUTTJGRkwxWlBPVk5SY0hKdlNUUldVMVY2Ym1SRU5tNW9ZVE55VGpKbk1WWkJiMGRCVm1oTVNHVldSRkZ3VUd0RlRrMTBZMjFvZEhJS1pHczJTM1ZTVTIxeVUwdG5aMFZXWmxacVJWcFBjRTFDUXk5cGVrVjNPRmM1U21wM1VEQlZWVzAxVEM4MlYyUXJVM1ZwZEU5NGFXZFhhbko0ZVhaR2NBcDBRbGhzTDFreFVYZElSbHBKSzNNME1HMW9Wa0pZVnpNMFUyMHpWMUo1U1M5WVZsWXpXREJwVjNGWU5HZE1iSE5OTW5CR1IySjRSaTlPYkVWTlp6WmtDbTl0ZVRkcFQzWnJibXhNVm1WMmVVZDNRVkV5YW5CRlEyZFpRbWxHYmxsWllrSnZZbmdyWkhabU9FaEdjMVJETDFkTGVuTlNSRVYyV0ZFNU5FUTVSRW9LWTJ4V2FtSlpOR0ZzWmxGUVpXRmplbEZKUzNWSlpubENLMGxWVFVoWFZFNUVOM2xYUTBWTFpHeHVha0pVUjFweVltcFlhRlZUWlV0eEwwWktOVGszTndvNFRESTNZbU5XU2pCS1JqTkNiRkYzTTFkalZGaGFSWFZUVlZvNVZsVkxSMlExYjNsa2RsWmpkeXRRY2tweFZubEJOMEpNTnpCck5TdEpkRUZSVHpKMkNuTnVRMjFvVVV0Q1owZzVUVkoxVUhNeVNpc3ZTMGhCV0V3MFF6Wm5VbWN6TjFGdldtOUNTQzlhYUcwdlJFZGpVV0o1ZUZwb05YTlRVSGQ0Y25aNlVsQUtaUzl5UlhsWFJDdG1XSFEwTUVnNUwyOUlSelJZVVdFeUwxUnlRMGhFWkV4dVpIZExhMlZSYTBSVVNIWnJRMUJNYjJGQ01FRjFSR0psWTNrckswcFNXZ3BHUzNKdGF6bDRVMGx4VEhwRmJVbHBMelExWm1abVZXZ3ZRMDl0YjB4Q1RITk1iVFJuTVcxMk1VWkpVblppYVVFclFrdFhDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo=" | base64 --decode > $HOME/.kube/config

          # Обновление/установка приложения с помощью Helm
          helm upgrade --install myapp ./myapp \
            --set image.tag=${{ github.ref_name }} \
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/diplom
